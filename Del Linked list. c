#include <stdio.h>
#include <stdlib.h>

// Definition of a node
struct Node {
    int data;
    struct Node* next;
};

// Function to delete a node with a given key
void deleteNode(struct Node** head_ref, int key) {
    // Store head node
    struct Node* temp = *head_ref;
    struct Node* prev = NULL;

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next; // Changed head
        free(temp); // Free old head
        return;
    }

    // Search for the key to be deleted, keep track of the previous node
    // as we need to change 'prev->next'
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key was not present in linked list
    if (temp == NULL) return;

    // Unlink the node from linked list
    prev->next = temp->next;

    free(temp); // Free memory
}

// Function to push a new node on the front of the list
void push(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

// Function to print the linked list
void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

// Main function to test the above functions
int main() {
    struct Node* head = NULL;

    // Create linked list 7->1->3->2
    push(&head, 2);
    push(&head, 3);
    push(&head, 1);
    push(&head, 7);

    printf("Created Linked List: ");
    printList(head);

    // Delete node with data 1
    deleteNode(&head, 1);
    printf("Linked List after Deletion of 1: ");
    printList(head);

    // Delete node with data 7
    deleteNode(&head, 7);
    printf("Linked List after Deletion of 7: ");
    printList(head);

    // Delete node with data 2
    deleteNode(&head, 2);
    printf("Linked List after Deletion of 2: ");
    printList(head);

    return 0;
}